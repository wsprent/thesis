#+STARTUP: latexpreview
* Solving the Prize-Collecting Steiner Tree Problem to Optimality :pcst:exact:algorithm:cplex:baseline:sap:
:PROPERTIES:
:bibtex: cite:ljubic2005solving
:END:
** Short Summary
Ljubic et. al. present an exact algorithm for solving PCSTP instances. This is done via running a Branch and Cut algorithm
 on a reduction of the orginal problem into a Prize Collecting variant of the Steiner aborescence problem (directed graph).

 At each B&C node, the ILP formulation is relaxed by removing the integer constraints and removing the exponentially many
"cut constraints". The relaxation is solved with CPLEX and cuts are made by readding violated "cut constraints" (found in
 poly time with max-flow). They don't describe how they find feasible solutions.
 
** ILP Formulation
Cut based.

Objective (Steiner Tree):
$$\text{minimize} \quad c(T) = \sum_{v \not\in V_T} p(v) + \sum_{e \in E_T} c(e)$$
Objective (Steiner Aborenscence):
$$minimize \quad c(SA) =  \sum_{i,j \in A_{SA}} c'_{ij} x_{ij} + \sum_{v \in V_{SA}} p(v)$$
Constraints:
- Exactly one arc bullets to each chosen vertice and zero to a not chosen vertice:
$$\sum_{ij \in A_{SA}}x_{ij} = y_i \qquad \forall i \in V_{SA} \setminus \{r\}$$
- Each subset of vertices which contains a selected vertice has in-degree larger than one (connected solution):
$$x(\delta^{-}(S)) \geq y_k \qquad \forall S \subset V_{SA};
 r \not\in S, k \in S $$
- Exactly one arc from the dummy root to the rest of the graph is selected:
$$\sum_{ri \in A_{SA}} x_{ri} = 1$$
- Integer Constraint:
$$x_{ij}, y_i \in \{0,1\} \qquad \forall (i,j) \in A_{SA}; \forall i \in V_{SA}$$
- Assymmetry constraint for unrooted PCSTP (always select root arc with lowest index -- to ensure bijection):
 $$x_{rj} \leq 1 - {y_j} \quad \forall i < j, i \in R$$

** Bullets
- Transform into Steiner Arborescence Problem (directed graph)
- Add root node
- Two arcs for each edge
- Algorithm in short:
  1. Solve LP-relaxtion.
  2. Cut away solutions by iteratively adding constraints based on max flow.
     (Polynomial time; Goldberg)
- Tested on OR-Library and GIS-DATA

* A dual-ascent-based branch-and-bound framework for the prize-collecting Steiner tree and related problems :psct:sap:algorithm:exact:
:PROPERTIES:
:bibtex: cite:leitner2016dual
:END:
** Short Summary
Leitner et. al. present an exact algorithm for solving a variety of STP-related instances (including PCSTP). Problem instances are
 reduced to a Prize Collecting variant of the Steiner Aborescence Problem.
 Then a branch and bound scheme is used. On each node, the LP-Dual is solved using Dual-Ascent.

A primal heuristics is used to find good incumbents {shortest path heuristic (SPH) (see Takahashi and Matsuyama 1980, Poggi de Arag ̃ao and Werneck 2002)}.
 This is used alongside unioning exact solutions to subgraphs.

The Steiner Aborescence here contains fixed-terminals. Implementation of this algorithm is available [[https://github.com/mluipersbeck/dapcstp][here]].
** ILP Formulation

** Bullets
- Fully implemented exact solution with accessible source code (c++).
- Reduction to Steiner Aborescence
- Branch and Bound
  + Dual Ascent for LB.
  + Primal heuristics for incumbent.
  + Split on "fixed" terminals (analogous to actual STP terminals).
- DIMACS Challenge
** Further Work Needed

*** TODO Fully understand the dual formulation
The dual formulation is a bit exotic, but probably important to understand.
- Look in Goemans/Williamson for intuition for "node potential"
- Apparently a generalisation of a dual scheme in Wong.
- Implementation based on (T. Pajor, E. Uchoa, and R. F. Werneck. A robust and scalable algorithm for the Steiner problem in graphs. 2014. 11th DIMACS challenge workshop.)

* The Prize Collecting Steiner Tree Problem: Theory and Practice :psct:approximation:algorithm:
:PROPERTIES:
:bibtex: cite:Johnson:2000:PCS:338219.338637
:END:
** Short Summary
Johnson et. al. present modifications to the Goemans Williamson algorithm (2-approximation). Their main contribution
 is the replacement of the pruning phase of the algorithm with "strong pruning". They experimentally claim to see a
 5% optimality gap from their algorithm.

** Further Work
- Think about whether or not approximation algorithms are intresting.
- Take a look at the original GW algorithm.

* The Steiner tree problem I: Formulations, compositions and extension of facets :st:sap:
** Short Summary
:PROPERTIES:
:bibtex: cite:Chopra:1994
:END:
Chopra studies polyhedra related to IP formulation of the STP. Claims that the directed version is nicer.

Contains some definitions for Steiner cuts, clutters.

* SCIP-Jack – A solver for STP and variants with parallelization extensions :sap:pcst:algorithm:implementation:exact:
:PROPERTIES:
:bibtex: cite:gamrath2017scip
:END:
** Short Summary
Gamrath et. al. have designed and implemented an SAP solver using the [[http://scip.zib.de/][SCIP]] framework which includes transformations from various STP variants
-- herein the PCSTP. They are based on the MIP solver SCIP using Branch-and-Bound, and complement it with separation procedures, heuristics,
 reductions etc. The SAP "plugin" is base on an older solver, Jack-III.

The bulk of the article touches upon (a) Dual Ascent, Improvement Heuristics, Reduction-Based Pruning, and a new Recombination Heuristics;
 and (b) the reductions from related STP problems.

The methodologies are very similar to citep:leitner2016dual and citep:ljubic2005solving.

** ILP Formulation
The ILP formulation used is the /flow-balanced directed cut/ formulation from cite:koch1998solving.
** Bullets
- Repetetive Shortest Path
- Dual Ascent
- Pruning
- Specific PCSTP results section.
  + Cannot solve some of the harder instances from DIMACS.

* Solving Steiner tree problems in graphs to optimality, Koch :sap:stp:cplex:algorithm:
** Short Summary
Koch presents an algorithm for solving the STP to optimality by solving the corresponding SAP to optimality.
 He uses a lot of the same methodlogies that we have seen in the other papers, but gives some good summaries of
 particularly preprocessing.
** Bullets
- Good summary of papers.
- Looks at both the STP and SAP (not PCST).
- Underlines preprocessing
- Supplies instances (/SteinLib/).
*** Preprocessing

**** Degree Test
1. A non-terminal of degree one can be removed
2. A non-terminal of degree two can be removed by joining its edges.
3. If there exists a terminal with degree 1, its edge is in the solution.
4. If an edge $e$ between two terminal nodes is of minimal cost amongs edges incident to terminals
   then $e$ can always be chosen.
**** Special Distance Test
C. Duin and A. Volgenant, An edge elimination test for the Steiner problem in graphs. Oper. Res. Lett. 8 (1989) 79–83.

**** Bottleneck Degree m Test
C. Duin and A. Volgenant, Reduction tests for the Steiner problem in graphs. Networks 19 ( 1989 ) 549 – 567.

*** The Algorithm

- Strong Branching
- Primal Heuristics: H. Takahashi and A. Matsuyama, An approximate solu- tion for the Steiner problem in graphs. Math. Jpn. 24 (1980) 573–577.
- Section on different kinds of separation methods.

* Strong lower bounds for the prize collecting Steiner problem in graphs, Lucena :pcst:algorithm:bound:
:PROPERTIES:
:bibtex: cite:lucena2005strong
:END:
** Short Summary
Lucena et al. show a method for gneerating good lower bounds on the PCST problem using a primal LP relaxation
 on a General Subtour Elimination Contraint formulation of the PCSTP alongside a max-flow separation procedure.

** Bullets
- Give good description of the max-flow sepration procedure.
- Computational results.
- Inspired by PCTSP.
- Summary of history of the problem.

* Combining a Memetic Algorithm with Integer Programming to Solve the Prize-Collecting Steiner Tree Problem, Ljubic :heuristic:pcst:
:PROPERTIES:
:bibtex: cite:Ljubic:2004:memetic
:END:

** Short Summary
Ljubic et al. present an evolutionary algorithm for finding good solutions for the PCSTP. The algorithm is combined
 with a pre-processing (standard reductions) step and a post-processing (solving an LP relaxation) step.

They solve many of the instances availabe at the time to optimality.

** Bullets
- Reduction steps.
- ILP based on SAP.
- Primal Heuristics.

* Local search with perturbations for the prize collecting Steiner tree problem in graphs. :pcst:heuristic:
:PROPERTIES:
:bibtex: cite:canuto2001local
:END:

** Short Summary
Canuto et al. present a multi step heuristic for the PCSTP based mainly on local search. In short it does the
 following:
- Get initial solution with GW algorithm (approx)
- Perform local search in N1 neighbourhood defined by removing/adding veritice (and finding MST)
- Perform a "peeling" method to remove surplus vertices.
- Perform relinking with a solution from a pool of "elite solutions"
- Pertubate prizes based on persistant nodes.

** Bullets
- Local search.
- No Hill Climbing, but randomized restarting.
- Some evolutionary attributes with relinking.
- Post processing with variable neighbourhood search.

* Reduction tests for the prize-collecting Steiner problem, Uchoa :pcst:reduction:
:PROPERTIES:
:bibtex: cite:uchoa2006reduction
:END:
** Short Summary
Uchoa observes that recent algoritms on the PCSTP use weakened "special distance" reduction tests as they
 are adapted from the STP. Uchoa defines a native SD test - which is NP-hard - to use natively on PCST.

The justification of using an NP hard red. test is that the STP tests are usually doe heuristically anyway
 as the O(n^3) cost are too high.

The Uchoa paper notes that a bunch of the algorithms above uses the weakened versions.

** Bullets

- Good source for reduction tests.

* Knowledge Guided Tabu Search for the Prize Collecting Steiner Tree Problem in Graphs :pcst:heuristic:
:PROPERTIES:
:bibtex: cite:fu2014knowledge
:END:

** Short Summary
Fu and Hao present a tabu search heuristic. I find the paper a find difficult to grok, but main points are:
- 4 move operators + 1 "vertex swap" operation.
- Split instances by three types: small, big, special?
- Pertubation strategy for new initial results
- DIMACS participant
* Median Problems
The family of median problems are somewhat related to the facility assignment problem, and also the the prize collecting
 problems.
- If we consider the former, the facility is a movable, connected subgraph (perhaps a tour), which must positioned such that its
 cost in minimized along with the assignment cost of vertices to the "facility".

- If we consider the latter, we are looking at a generalisation of the prize collecting problems. Instead of fixed vertex prizes we
 are talking about variable prize/penalties which are dependent on a vertex basis dependent on which subgraph is "selected.

These problems can be seen as modeling the problem of creating a supply network of sorts. For example -- returning to the facility
 assignment problem -- placing a selection of warehouses which will supply the nearest "customers" with goods. Alternatively, the 
 facility can be a mainline sewerage/waterline/cabelling and the assignment costs of connecting nodes to the mainline. 


** Locating a Median Subtree on a Network, Kim
Considers the problem of finding a "median" subtree in a graph. Median is used in the common way to describe
 a subgraph (typically called a "facility")
 which minimizes the cost of the subgraph along with the sum of the distances from all vertices to the subgraph.

In this variant of the problem, the subgraph is a tree. Furthermore, the problem is solved on a euclidian embedding of
 the graph (an undirected graph with no parallel edges). Hence, the  auxilliary 
distances are not from an unselected vertex to a closest selected vertex, but rather a closest point on the
 tree itself.

Two more quirks in this variant of the problem is,

1. The total cost of the facility tree is multiplied by some constant $k$.
2. Each vertex has a associated weight, used to factor its distance from the
 facility in the objective.

Hence the objective function is,
$$k c(T) + \sum_{v_i \not \in V_T} w_i d(v, T)$$

Kim et. al. consider special case graphs (tree and cactus graph) along side the general case which is NP-hard.
** The Median Cycle Problem, Laporte
Median problem in a mixed graph -- a graph with both arcs and edges -- where the objective is to minimize the combined
 cost of a cycle (in the edges) alongside the sum of distances of all vertices to the cycle (in the arcs). The latter is
 commonly reffered to as "assignment costs". Additionally
 the vertex set contains a depot.

Two variants are considered which correspond to the PCST and Budget problems (the budget is on the assignment costs),
 and the problem is considered a variant of the Facility Location problem.

** Median Tour and Maximal Covering Tour Problems, Current
This variant is similar to the one discussed by Laporte et. al. but has,
- a bicriterion objective function,
- a quota of vertices to visit on the tour,
- vertex weights which modify the assignment cost, and
- only a single arc set but still two cost functions.

These factors makes the problem less related to the PCSTP than the two above.
