#+STARTUP: latexpreview
* Solving the Prize-Collecting Steiner Tree Problem to Optimality :pcst:exact:algorithm:cplex:baseline:sap:
:PROPERTIES:
:bibtex: cite:ljubic2005solving
:END:
** Short Summary
Ljubic et. al. present an exact algorithm for solving PCSTP instances. This is done via running a Branch and Cut algorithm
 on a reduction of the orginal problem into a Steiner aborescence problem (directed graph).

 At each B&C node, the ILP formulation is relaxed by removing the integer constraints and removing the exponentially many 
"cut constraints". The relaxation is solved with CPLEX and cuts are made by readding violated "cut constraints" (found in
 poly time with max-flow). They don't describe how they find feasible solutions.
 
** ILP Formulation
Cut based.

Objective (Steiner Tree):
$$\text{minimize} \quad c(T) = \sum_{v \not\in V_T} p(v) + \sum_{e \in E_T} c(e)$$
Objective (Steiner Aborenscence):
$$minimize \quad c(SA) =  \sum_{i,j \in A_{SA}} c'_{ij} x_{ij} + \sum_{v \in V_{SA}} p(v)$$
Constraints:
- Exactly one arc bullets to each chosen vertice and zero to a not chosen vertice:
$$\sum_{ij \in A_{SA}}x_{ij} = y_i \qquad \forall i \in V_{SA} \setminus \{r\}$$
- Each subset of vertices which contains a selected vertice has in-degree larger than one (connected solution):
$$x(\delta^{-}(S)) \geq y_k \qquad \forall S \subset V_{SA};
 r \not\in S, k \in S $$
- Exactly one arc from the dummy root to the rest of the graph is selected:
$$\sum_{ri \in A_{SA}} x_{ri} = 1$$
- Integer Constraint:
$$x_{ij}, y_i \in \{0,1\} \qquad \forall (i,j) \in A_{SA}; \forall i \in V_{SA}$$
- Assymmetry constraint for unrooted PCSTP (always select root arc with lowest index -- to ensure bijection):
 $$x_{rj} \leq 1 - {y_j} \quad \forall i < j, i \in R$$

** Bullets
- Transform into Steiner Arborescence Problem (directed graph)
- Add root node
- Two arcs for each edge
- Algorithm in short:
  1. Solve LP-relaxtion.
  2. Cut away solutions by iteratively adding constraints based on max flow. 
     (Polynomial time; Goldberg)
- Tested on OR-Library and GIS-DATA

* A dual-ascent-based branch-and-bound framework for the prize-collecting Steiner tree and related problems :psct:sap:algorithm:exact:
:PROPERTIES:
:bibtex: cite:leitner2016dual
:END:
** Short Summary
Leitner et. al. present an exact algorithm for solving a variety of STP-related instances (including PCSTP). Problem instances are
 reduced to Steiner Aborescence instances. Then a branch and bound scheme is used. On each node, the LP-Dual is solved using Dual-Ascent.

A primal heuristics is used to find good incumbents {shortest path heuristic (SPH) (see Takahashi and Matsuyama 1980, Poggi de Arag ̃ao and Werneck 2002)}.
 This is used alongside unioning exact solutions to subgraphs.

The Steiner Aborescence here contains fixed-terminals. Implementation of this algorithm is available [[https://github.com/mluipersbeck/dapcstp][here]].
** ILP Formulation

** Bullets
- Fully implemented exact solution with accessible source code (c++).
- Reduction to Steiner Aborescence
- Branch and Bound
  + Dual Ascent for LB.
  + Primal heuristics for incumbent.
  + Split on "fixed" terminals (analogous to actual STP terminals).
- DIMACS Challenge
** Further Work Needed

*** TODO Fully understand the dual formulation
The dual formulation is a bit exotic, but probably important to understand.
- Look in Goemans/Williamson for intuition for "node potential"
- Apparently a generalisation of a dual scheme in Wong.
- Implementation based on (T. Pajor, E. Uchoa, and R. F. Werneck. A robust and scalable algorithm for the Steiner problem in graphs. 2014. 11th DIMACS challenge workshop.)

* The Prize Collecting Steiner Tree Problem: Theory and Practice :psct:approximation:algorithm:
:PROPERTIES:
:bibtex: cite:Johnson:2000:PCS:338219.338637
:END:
** Short Summary
Johnson et. al. present modifications to the Goemans Williamson algorithm (2-approximation). Their main contribution
 is the replacement of the pruning phase of the algorithm with "strong pruning". They experimentally claim to see a
 5% optimality gap from their algorithm.

** Further Work
- Think about whether or not approximation algorithms are intresting.
- Take a look at the original GW algorithm.

* The Steiner tree problem I: Formulations, compositions and extension of facets :st:sap:
** Short Summary
:PROPERTIES:
:bibtex: cite:Chopra:1994
:END:
Chopra studies polyhedra related to IP formulation of the STP. Claims that the directed version is nicer.

Contains some definitions for Steiner cuts, clutters.

* SCIP-Jack – A solver for STP and variants with parallelization extensions :sap:pcst:algorithm:implementation:exact:
:PROPERTIES:
:bibtex: cite:gamrath2017scip
:END:
** Short Summary
Gamrath et. al. have designed and implemented an SAP solver using the [[http://scip.zib.de/][SCIP]] framework which includes transformations from various STP variants 
-- herein the PCSTP. They are based on the MIP solver SCIP using Branch-and-Bound, and complement it with separation procedures, heuristics,
 reductions etc. The SAP "plugin" is base on an older solver, Jack-III.

The bulk of the article touches upon (a) Dual Ascent, Improvement Heuristics, Reduction-Based Pruning, and a new Recombination Heuristics;
 and (b) the reductions from related STP problems.

The methodologies are very similar to citep:leitner2016dual and citep:ljubic2005solving.

** ILP Formulation
The ILP formulation used is the /flow-balanced directed cut/ formulation from cite:koch1998solving.
** Bullets
- Repetetive Shortest Path
- Dual Ascent
- Pruning
- Specific PCSTP results section.
  + Cannot solve some of the harder instances from DIMACS.

* Solving Steiner tree problems in graphs to optimality, Koch :sap:stp:cplex:algorithm:
** Short Summary
Koch presents an algorithm for solving the STP to optimality by solving the corresponding SAP to optimality.
 He uses a lot of the same methodlogies that we have seen in the other papers, but gives some good summaries of
 particularly preprocessing.
** Bullets
- Good summary of papers.
- Looks at both the STP and SAP (not PCST).
- Underlines preprocessing
- Supplies instances (/SteinLib/).
*** Preprocessing

**** Degree Test
1. A non-terminal of degree one can be removed
2. A non-terminal of degree two can be removed by joining its edges.
3. If there exists a terminal with degree 1, its edge is in the solution.
4. If an edge $e$ between two terminal nodes is of minimal cost amongs edges incident to terminals
   then $e$ can always be chosen.
**** Special Distance Test
C. Duin and A. Volgenant, An edge elimination test for the Steiner problem in graphs. Oper. Res. Lett. 8 (1989) 79–83.

**** Bottleneck Degree m Test
C. Duin and A. Volgenant, Reduction tests for the Steiner problem in graphs. Networks 19 ( 1989 ) 549 – 567.

*** The Algorithm

- Strong Branching
- Primal Heuristics: H. Takahashi and A. Matsuyama, An approximate solu- tion for the Steiner problem in graphs. Math. Jpn. 24 (1980) 573–577.
- Section on different kinds of separation methods.
