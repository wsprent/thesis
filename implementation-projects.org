* Done

Use Gurobi's Python API to determine whether state of the art general MIP solvers can compete with custom,
problem specific methods.

Try:
1. Solve the PCSTP with just Lazy Constraints. Separate integer GSECs by DFS to find cycles.
2. Add LP relaxation cuts to the above using max flow.
3. Either piggyback on the preprocessing routines of SCIP-Jack or DIY.


* Proposal: Small experiments

Validate some of the small factoids which are presented in the various articles.

I could perform some selection of the following computational experiments.

** Directed reformulations of the PCSTP give better performance than undirected
Both of the well known exact solvers for the PCSTP transform the input problem to an equivalent directed
version of it. Perform a test comparing the runtimes for solving PCSTP with and without transformations.

** Which combination of preprocessing routines gives the best outcome
Preprocessing routines are commonly used in research papers. However the ordering and selection of graph
reductions have yet to be stringently compared.

Some subset of the Cartesian product of graph reductions could be compared.


* Quick List

1. Preprocessing comparison

2. SCIP-Jack vs. Cplex/Gurobi Implementation

3. Something with the GW algorithm

4. Exact solution to Quota/Budget problems

5. Cplex/Gurobi NW vs. GW optimisation problem

6. Exact solution to the Profitable Tour Problem
